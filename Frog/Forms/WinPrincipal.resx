<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAOwAAADsAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAADgdtABgNwQAYDcEAGA3BACMVzAAoGtEAKBrRACga0QAfFcYAGhLBABoSwQAJ
        B3QCBQdsBRQXpQQWGrsEFhq7BRQXpQIFBWsACQd0ABoSwQAaEsEAHxXGACga0QAoGtEAKBrRACMVzAAY
        DcEAGA3BABgNwQAOB2wAAAAAAAAAAAADA2IAHRD2AJdR/wCfVf8AHRL/AnJR/wKxff8CsX3/ArF9/wKx
        ff8BSTP5Bh4i8BdxhvohmrX/JKvJ/ySryf8hmrX/F3GG+gYeIvABSTP5ArF9/wKxff8CsX3/ArF9/wJy
        UP8AHhL/AJ9V/wCVUP8AGQ33AAMDYAAAAAAAAAAAAAAAAAAKBn0ADgfvAD8h7QBGJvsAAAD/ACYZ/gFU
        Ov4D05X/A92c/wIkG/Mpw+X/Ltn//y7Z//8u2f//Ltn//y7Z//8u2f//KcTm/wIkG/MD3Zz/A9OV/wFT
        Of4AJhn+AAAA/wBFJfsAPSDtAA0G8AAKBnsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkAAAA6AAAAYwAB
        ALAAAwL6ABAK/gPAh/8D3Zz/AiIb8yvK7f8u2f//Ltn//y7Z//8u2f//Ltn//y7Z//8ry+7/AiIb8wPd
        nP8Dv4f/ABAK/gADAvoAAQCzAAAAYwAAADoAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAEADAZ+AB0Q8ACnWf8ANiD/A8CH/wPdnP8CIhvzK8rt/y7Z//8u2f//Ltn//y7Z//8u2f//Ltn//yvL
        7v8CIhvzA92c/wO/h/8ANiD/AKha/wAfEPAAEwprAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAA8IngA6H/MAw2j/AMhr/wA2IP8DwIf/A92c/wIiG/Mryu3/Ltn//y7Z//8u2f//Ltn//y7Z
        //8u2f//K8vu/wIiG/MD3Zz/A7+H/wA2IP8AyGv/AMRp/wC4Y9sAql4eAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAPCYcAOR/yAMRp/wDIa/8AyGv/ADYg/wPAh/8D3Zz/AiIb8yvK7f8u2f//Ltn//y7Z
        //8u2f//Ltn//y7Z//8ry+7/AiIb8wPdnP8Dv4f/ADYg/wDIa/8AyGv/AMhr/wBgM+oADgePAAAAAAAA
        AAAAAAAAAAAAAAAAAAAABABBAB0P8ADDaP8AyGv/AMhr/wDIa/8ANiD/A7+H/wPdnP8CJBzzKsjr/y7Z
        //8u2f//Ltn//y7Z//8u2f//Ltn//yrI6/8CJBzzA92c/wO+hv8ANR//AMhr/wDIa/8AyGv/AMNo/wBa
        MNgA/wABAAAAAAAAAAAAAAAAAAAABQAQCeEApFj/AMhr/wDIa/8AyGv/AMhr/wA/JP8Cs3//A92c/wI5
        KvElrs3/Ltn//y7Z//8u2f//Ltn//y7Z//8u2f//Ja7N/wI7LPED3Zz/ArJ9/wA/JP8AyGv/AMhr/wDI
        a/8AyGv/AMhr/wCkV2oAAAACAAAAAAAAAAAAAABXAEkn8QDIa/8AyGv/AMhr/wDIa/8AyGv/AEkp/wKl
        dP8D3Zz/Aodf/BBUXfQu2f//Ltn//y7Z//8u2f//Ltn//y7Z//8QU1z0Aohg/QPdnP8Co3P/AEoq/wDI
        a/8AyGv/AMhr/wDIa/8AyGv/AFEr7QAAAFEAAAAAAAAAAAAPCaYAjkz/AMhr/wDIa/8AyGv/AMhr/wDI
        a/8AYTX/ApFm/wPdnP8D2pr/AS0h9Bdxgvkt1fr/Ltn//y7Z//8t1fr/F3CB+QEuIfQD2pr/A92c/wKO
        ZP8AYTb/AMhr/wDIa/8AyGv/AMhr/wDIa/8AjEv/AA4IoQAAAAAAAAAAABULuQCaUv8AyGv/AMhr/wDI
        a/8AyGv/AMhr/wCFR/8BX0L2A92c/wPdnP8D0ZP/Ak439gIZF/YMR03wDEdL8AIZF/YCTzj2A9GT/wPd
        nP8D3Zz/AVxA9gCFR/8AyGv/AMhr/wDIa/8AyGv/AMhr/wCTT/8AFQuyAAAAAAAAAAAABwVrAE4q9ADI
        a/8AyGv/AMhr/wDIa/8Av2b/AE8r9wAkGu8D3Zz/A92c/wPdnP8D3Zz/A86S/wKod/8CqHf/A86S/wPd
        nP8D3Zz/A92c/wPdnP8AIhfvAE8r9wC/Zv8AyGv/AMhr/wDIa/8AyGv/AEUk9QAIBWQAAAAAAAAAAAAA
        AAYADgjFAEAi8ACLSv8Aikr/AFMt9AANBvAADAaEABEN2wO+hv8D3Zz/A92c/wPdnP8D3Zz/A92c/wPd
        nP8D3Zz/A92c/wPdnP8D3Zz/A7yF/wASDdoADAaFAA0G8ABTLfQAi0r/AItK/wBAIvAAEAjAAAAAAwAA
        AAAAAAAAAAAAAAAAAAIAAwNZABEJowASCqAAAwNaAAAACgAAAAAABgNZAU028wKref8CgVv/AVs//wFO
        NP8BQy3/AUMt/wFONP8BWz//AoJb/wKref8BTDbzAAYDWQAAAAAAAAAKAAMDWwARCqEAEQmjAAMDWQAA
        AAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALQAOB7EACQX4AEAk8gBr
        OvwAjEv/AJpS/wCiV/8Ao1f/AJ9V/wCLSv8Abzz8AD8k8gAKBvcADwevAAAALAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVDG4AFwzvAIdI/ADE
        af8AyGv/AMhr/wDIa/8AyGv/AMhr/wDIa/8AyGv/AMhr/wDIa/8AyGv/AMVp/wCFR/wAEwvyAAwHjwAA
        AAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxWYjALtk3gDF
        af8AyGv/AMhr/wDIa/8AyGv/AMhr/wDIa/8AyGv/AMhr/wDIa/8AyGv/AMhr/wDIa/8AyGv/AMhr/wDC
        aP8AQiTyAA8HrAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYDVwBR
        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
        AD/8AAA//AAAP/4AAH/+AYB//wPA//////8=
</value>
  </data>
</root>